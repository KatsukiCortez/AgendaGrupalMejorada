package Formularios;

import Persistencia.cConnection;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class frmRegistrar extends javax.swing.JFrame {

    /**
     * Creates new form frmRegistrar
     */
    public frmRegistrar() {
        initComponents();
        setLocationRelativeTo(null); //para que aparezca en el centro de la pantalla
        MostrarDatos(); //al iniciar el programa llama la funcion de nombre de columna
        MostrarRegistroTabla(); //al iniciar el programa llama la funcion de datos de la tabla
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();
        txtDNI = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtApPat = new javax.swing.JTextField();
        try {
            txtApMat =(javax.swing.JTextField)java.beans.Beans.instantiate(getClass().getClassLoader(), "Formularios.frmRegistrar_txtApMat");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
        txtTelf = new javax.swing.JTextField();
        txtCorreo = new javax.swing.JTextField();
        txtFech = new javax.swing.JTextField();
        txtDire = new javax.swing.JTextField();
        txtGen = new javax.swing.JTextField();
        btnRegMod = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnmod = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDatos);

        txtDNI.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDNIKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("DNI*");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Nombre*");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Apellido Paterno*");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Apellido Materno*");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Correo");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Genero*");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Fecha de Nacimiento");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Direccion");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Telefono*");

        txtNombre.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        txtApPat.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtApPat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApPatKeyTyped(evt);
            }
        });

        txtApMat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApMatKeyTyped(evt);
            }
        });

        txtTelf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelfKeyTyped(evt);
            }
        });

        txtCorreo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtFech.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtDire.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtGen.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtGen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtGenKeyTyped(evt);
            }
        });

        btnRegMod.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnRegMod.setText("reg");
        btnRegMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegModActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnEliminar.setText("Elim");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnmod.setText("mod");
        btnmod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmodActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("*OBLIGATORIO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(33, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtGen, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApPat, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtNombre)
                                .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtApMat, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFech)
                            .addComponent(txtCorreo)
                            .addComponent(txtTelf)
                            .addComponent(txtDire, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addComponent(btnmod)
                        .addGap(40, 40, 40)
                        .addComponent(btnEliminar)))
                .addGap(140, 140, 140))
            .addGroup(layout.createSequentialGroup()
                .addGap(242, 242, 242)
                .addComponent(btnRegMod)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtApPat, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtApMat, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtGen, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtTelf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtFech, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(txtDire, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)))))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegMod)
                    .addComponent(btnEliminar)
                    .addComponent(btnmod))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegModActionPerformed
        if(txtDNI.getText().isEmpty() || txtNombre.getText().isEmpty() || txtApPat.getText().isEmpty() || txtApMat.getText().isEmpty()
                || txtGen.getText().isEmpty() || txtTelf.getText().isEmpty()){ //saber si estan vacios
            JOptionPane.showMessageDialog(this,"Debe rellenar todos los espacios obligatorios"); //mensaje para rellenar espacios obligatorios
        } else{
            try{
            cConnection conectado = new cConnection(); //llama la clase cConnectino
            Connection con = null; //para la variable conectar
            con  = conectado.getConnection(); //llama la conexion
            Statement st = con.createStatement(); //para crear sentencias
            //sentencia SQL para ingresar datos
            String SQLGuardar = "INSERT INTO datos(DNI,Nombre,ApellidoPaterno,ApellidoMaterno,Genero,Telefono,Correo,FechaNacimiento,Direccion) VALUES(?,?,?,?,?,?,?,?,?)";
            
            PreparedStatement pst = con.prepareCall(SQLGuardar); //llama a SQLGuardar
            
            pst.setInt(1,Integer.parseInt(txtDNI.getText())); //guarda DNI  -    siempre debe comenzar en 1
            pst.setString(2,txtNombre.getText()); //guarda nombre
            pst.setString(3,txtApPat.getText());
            pst.setString(4,txtApMat.getText());
            pst.setString(5,txtGen.getText());
            pst.setString(6,txtTelf.getText());
            pst.setString(7,txtCorreo.getText());
            pst.setString(8,txtFech.getText());
            pst.setString(9,txtDire.getText());
            int n = pst.executeUpdate(); //guarda ejecutando la sentencia
            pst.close(); //para cerrar PreparedStatement
            if(n>0){ //preguntamos si tiene datos
                JOptionPane.showMessageDialog(null,"Datos Guardado Correctamente"); //mensaje de guardado correctamente
                Limpiar(); //llama la funcion limpiar
                MostrarDatos(); //llama funcion de mostrar nombre de columna
                MostrarRegistroTabla(); //llama funcion de mostrar datos tabla
            }
            } catch(Exception e){
                JOptionPane.showMessageDialog(null,"Error al guardar los datos - " + e); //mensaje de error de guardado y el problema a resolver
            }
        }
        
    }//GEN-LAST:event_btnRegModActionPerformed

    private void tblDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDatosMouseClicked
        //seleccionar registrops de la tabla
        
        try{
            int fila = tblDatos.getSelectedRow();
            this.txtDNI.setText(tblDatos.getValueAt(fila,0).toString());
            this.txtNombre.setText(tblDatos.getValueAt(fila,1).toString());
            this.txtApPat.setText(tblDatos.getValueAt(fila,2).toString());
            this.txtApMat.setText(tblDatos.getValueAt(fila,3).toString());
            this.txtGen.setText(tblDatos.getValueAt(fila,4).toString());
            this.txtTelf.setText(tblDatos.getValueAt(fila,5).toString());
            this.txtCorreo.setText(tblDatos.getValueAt(fila,6).toString());
            this.txtFech.setText(tblDatos.getValueAt(fila,7).toString());
            this.txtDire.setText(tblDatos.getValueAt(fila,8).toString());
        } catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error al sleccionar los datos - "+ e); //mensaje de error de sellecion de datos y el problema a resolver
        }
    }//GEN-LAST:event_tblDatosMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int fila = this.tblDatos.getSelectedRow(); //para seleccionar la fila
        if(fila == -1){
            JOptionPane.showMessageDialog(this,"Para eliminar un registro, debe seleccionar primero");
        } else{
            int eliminar = JOptionPane.showConfirmDialog(null,"¿Esta seguro en eliminar este registro?","Pregunta",JOptionPane.ERROR_MESSAGE,JOptionPane.YES_NO_OPTION);
            if(eliminar == JOptionPane.YES_OPTION){
                try{
                    cConnection conectado = new cConnection(); //llama la clase cConectinn
                    Connection con2 = null; //para la variable conectar
                    con2 = conectado.getConnection(); //llama la conexion
                    Statement st = con2.createStatement(); //crear sentencia sql
                    //Sentencia sql para eliminar datos
                    String SQLEliminar = "DELETE * FROM datos WHERE DNI = ?";
                    PreparedStatement pst = con2.prepareStatement(SQLEliminar); //llama a SQLEliminar
                    pst.setInt(1,Integer.parseInt(txtDNI.getText())); //para que pueda funcionar correctamente la sentencia SQLEliminar
                    int n = pst.executeUpdate(); //para ejcutar la consulta sql
                    if(n>0){ //si hay datos en la tabla
                        JOptionPane.showMessageDialog(this,"Registro eliminado correctamente"); //mensaje de eliminado correctamente
                        Limpiar(); //llama la funcion limpiar
                        MostrarDatos(); //llama la funcion MostrarDatos
                        MostrarRegistroTabla(); //llama la funcion MostrarRegistroTabla
                    }
                } catch(Exception e){
                    JOptionPane.showMessageDialog(this,"Ha ocurrido un error al eliminar el registro"); //mensaje de error de eliminado y el problema a resolver
                }
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnmodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmodActionPerformed
        int fila = this.tblDatos.getSelectedRow(); //para selecionar la fila
        if(fila == -1){ //si no esta seleccionada
            JOptionPane.showMessageDialog(this,"Para actualizar un registro, debe seleccionarlo primero.");
        } else{
            try{
                Connection con2 = null; //llama la conexion
                cConnection conectando = new cConnection(); //llama la clase cConnection
                con2 = conectando.getConnection();//retorna conexion
                Statement st = con2.createStatement(); //crea una sentencia sql
                //Sentencia sql para poder modificar la fila seleccionada
                String SQLModificar = "UPDATE datos SET Nombre=?,ApellidoPaterno=?,ApellidoMaterno=?,Genero=?,Telefono=?,Correo=?,FechaNacimiento=?,Direccion=? WHERE DNI=?";
                PreparedStatement pst = con2.prepareStatement(SQLModificar); //llamamos nuestra sentencia sql
                pst.setInt(9,Integer.parseInt(txtDNI.getText())); //guarda lo del campo txtid a la base de datos, el 4 es de la cantidad de columnas
                pst.setString(1,txtNombre.getText()); //guarda lo del campo txtNombre a la base de datos
                pst.setString(2,txtApPat.getText());
                pst.setString(3,txtApMat.getText());
                pst.setString(4,txtGen.getText());
                pst.setString(5,txtTelf.getText());
                pst.setString(6,txtCorreo.getText());
                pst.setString(7,txtFech.getText());
                pst.setString(8,txtDire.getText());
                int s = pst.executeUpdate();
                pst.close();
                
                if(s>0){
                    JOptionPane.showMessageDialog(this,"Datos actualizados correctamente");
                    Limpiar(); //para limpiar los casilleros
                    MostrarDatos(); //para mostrar los nombres de cada columna
                    MostrarRegistroTabla(); //para mostrar los datos en la tabla
                }
            } catch(Exception e){
                JOptionPane.showMessageDialog(this,"Error al actualizar los datos - "+ e); //mensaje de error y el problema;
            }
        }
    }//GEN-LAST:event_btnmodActionPerformed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        int llavero = evt.getKeyChar(); //condicion para que solo admita caracteres alfabeticos
        
        boolean mayusc = llavero >= 65 && llavero <= 90;
        boolean minusc = llavero >= 97 && llavero <= 122;
        boolean espacio = llavero == 32;
        
        if(!(mayusc || minusc || espacio)){
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtDNIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDNIKeyTyped
        int llavero = evt.getKeyChar(); //condicion para que solo admita caracteres numericos
        
        boolean num = llavero >= 48 && llavero <= 57;
        
        if(!num){
            evt.consume();
        }
        
        if(txtDNI.getText().trim().length() == 8){ //limita cantidad de caracteres para usar
            evt.consume();
        }
    }//GEN-LAST:event_txtDNIKeyTyped

    private void txtApPatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApPatKeyTyped
        int llavero = evt.getKeyChar(); //condicion para que solo admita caracteres alfabeticos
        
        boolean mayusc = llavero >= 65 && llavero <= 90;
        boolean minusc = llavero >= 97 && llavero <= 122;
        boolean espacio = llavero == 32;
        
        if(!(mayusc || minusc || espacio)){
            evt.consume();
        }
    }//GEN-LAST:event_txtApPatKeyTyped

    private void txtApMatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApMatKeyTyped
        int llavero = evt.getKeyChar(); //condicion para que solo admita caracteres alfabeticos
        
        boolean mayusc = llavero >= 65 && llavero <= 90;
        boolean minusc = llavero >= 97 && llavero <= 122;
        boolean espacio = llavero == 32;
        
        if(!(mayusc || minusc || espacio)){
            evt.consume();
        }
    }//GEN-LAST:event_txtApMatKeyTyped

    private void txtTelfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelfKeyTyped
        int llavero = evt.getKeyChar(); //condicion para que solo admita caracteres numericos
        
        boolean num = llavero >= 48 && llavero <= 57;
        
        if(!num){
            evt.consume();
        }
        
        if(txtDNI.getText().trim().length() == 9){ //limita cantidad de caracteres para usar
            evt.consume();
        }
    }//GEN-LAST:event_txtTelfKeyTyped

    private void txtGenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGenKeyTyped
        int llavero = evt.getKeyChar(); //condicion para que solo admita caracteres alfabeticos
        
        boolean letM = llavero == 77 || llavero == 109;
        boolean letF = llavero == 70 || llavero == 102; 
        
        if(!(letM || letF)){
            evt.consume();
        }
        
        if(txtGen.getText().trim().length() == 1){ //limita cantidad de caracteres para usar
            evt.consume();
        }
    }//GEN-LAST:event_txtGenKeyTyped

    public void MostrarDatos(){ //Para editar los nombres de cada columna de la tabla
        DefaultTableModel MiTabla = (DefaultTableModel)tblDatos.getModel();
        String EncabezadoTabla[] = {"DNI","Nombre","Apellido Paterno","Apellido Materno",
                                    "Genero","Telefono","Correo","Fecha de Nacimiento","Direccion"}; //para cambiar los nombres
        MiTabla = new DefaultTableModel(null,EncabezadoTabla); //para poner los nombres en la tabla
        tblDatos.setModel(MiTabla); 
    }
    
    public void MostrarRegistroTabla(){ //para que muestre los registros
        
        try{
            cConnection conectando = new cConnection(); //llama la clase cConnection
            Connection conex = null; //llama la conexion
            conex = conectando.getConnection(); //regresa la conexion
            DefaultTableModel dTabla = (DefaultTableModel)tblDatos.getModel(); //para obtener el valor de cualquier celda de la tabla
            String Registro[] = new String[9]; //el numero se modifica segun el numero de columnas
            String SQL = "Select * from datos"; //sentencia SQL para seleccionar los datos
            Statement sentencia = conex.createStatement(); //para crear una sentencia SQL
            ResultSet rst = sentencia.executeQuery(SQL); //ejecuta la sentencia SQL
            while(rst.next()){
                Registro[0] = rst.getString("DNI");//el numero y el nombre que esta en BS de access, se comienza desde el 0
                Registro[1] = rst.getString("Nombre");
                Registro[2] = rst.getString("ApellidoPaterno");
                Registro[3] = rst.getString("ApellidoMaterno");
                Registro[4] = rst.getString("Genero");
                Registro[5] = rst.getString("Telefono");
                Registro[6] = rst.getString("Correo");
                Registro[7] = rst.getString("FechaNacimiento");
                Registro[8] = rst.getString("Direccion");
                dTabla.addRow(Registro); //agrega cada columna
            }
            tblDatos.setModel(dTabla); //Asigna el modelo de datos en nuestra tabla
        } catch(Exception e){
            JOptionPane.showMessageDialog(null,"Se ha producido un error al cargar los datos - " + e); //mensaje de error y el problema a resolver
        }
    }
    
    public void Limpiar(){ //para limpiar todos los JTextField
        this.txtDNI.setText("");
        this.txtNombre.setText("");
        this.txtApPat.setText("");
        this.txtApMat.setText("");
        this.txtGen.setText("");
        this.txtTelf.setText("");
        this.txtCorreo.setText("");
        this.txtFech.setText("");
        this.txtDire.setText("");
    }
            
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmRegistrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmRegistrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmRegistrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmRegistrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmRegistrar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnRegMod;
    private javax.swing.JButton btnmod;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDatos;
    private javax.swing.JTextField txtApMat;
    private javax.swing.JTextField txtApPat;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtDire;
    private javax.swing.JTextField txtFech;
    private javax.swing.JTextField txtGen;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelf;
    // End of variables declaration//GEN-END:variables
}
